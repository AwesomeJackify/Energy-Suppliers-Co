{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jackg\\\\OneDrive\\\\Desktop\\\\Jive\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './assets/css/app.css';\nimport Video from './components/Video.js';\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"./components/Axios.js\";\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Navbar from './components/Navbar.js';\nimport Header from \"./components/Header.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [videos, setVideos] = useState([]);\n  const [progress, setProgress] = useState([{\n    id: 1,\n    progress: 70\n  }], []);\n  var startTime = 0;\n  useEffect(() => {\n    async function fetchPosts() {\n      const response = await axios.get('/v2/posts');\n      setVideos(response.data);\n      return response;\n    }\n\n    fetchPosts();\n\n    async function updateProgress(ztartTime) {\n      setProgress(startTime / 1000);\n      return 0;\n    }\n\n    updateProgress(startTime);\n  }, []);\n\n  const updateProgress = () => {\n    setProgress([{\n      id: 1,\n      progress: 45\n    }]);\n    console.log(progress);\n  };\n\n  const componentDidMount = () => {\n    /* On init set the start time\r\n       Also: multiplying new Date() by 1 will return a timestamp\r\n     */\n    startTime = new Date() * 1;\n  };\n\n  componentDidMount();\n\n  const componentWillUnmount = () => {\n    /* Then on view destroy set the endTime */\n    const endTime = new Date() * 1;\n    /* Subtract the end time with start time, since endTime has greater value. The result\r\n     is the difference between start and end time in milliseconds.\r\n     */\n\n    const elapsed = endTime - startTime;\n    /* The result is in milliseconds so:\r\n       elapsed / 1000 -> is seconds\r\n       elapsed / 1000 / 60 -> is minutes\r\n       etc.\r\n     */\n\n    console.log(elapsed);\n    startTime = 0;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__videos\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), videos.map(video => /*#__PURE__*/_jsxDEV(Video, {\n        url: video.url,\n        channel: video.channel,\n        description: video.description,\n        song: video.song,\n        likes: video.likes\n      }, video.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progressBar\",\n        children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n          animated: true,\n          now: progress[0].progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: componentWillUnmount,\n      children: \"Bye\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Je0NWiVXu1E6634B+LOUo4hctSc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jackg/OneDrive/Desktop/Jive/frontend/src/App.js"],"names":["Video","React","useState","useEffect","axios","ProgressBar","Navbar","Header","App","videos","setVideos","progress","setProgress","id","startTime","fetchPosts","response","get","data","updateProgress","ztartTime","console","log","componentDidMount","Date","componentWillUnmount","endTime","elapsed","map","video","url","channel","description","song","likes","name"],"mappings":"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","sourcesContent":["import './assets/css/app.css';\r\nimport Video from './components/Video.js';\r\nimport React, {useState, useEffect} from \"react\"\r\nimport axios from \"./components/Axios.js\"\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\nimport Navbar from './components/Navbar.js';\r\nimport Header from \"./components/Header.js\";\r\n\r\nfunction App() {\r\n  const [videos, setVideos] = useState([]); \r\n\r\n  const [progress, setProgress] = useState([\r\n    {\r\n      id: 1,\r\n      progress: 70,\r\n    }\r\n  ], [])\r\n\r\n  var startTime = 0;\r\n\r\n  useEffect(() => {\r\n    async function fetchPosts() {\r\n      const response = await axios.get('/v2/posts')\r\n      setVideos(response.data);\r\n\r\n      return response;\r\n    }\r\n\r\n    fetchPosts();\r\n\r\n    async function updateProgress(ztartTime) {\r\n      setProgress(startTime / 1000);\r\n      return 0;\r\n    }\r\n\r\n    updateProgress(startTime);\r\n  }, [])\r\n\r\n  const updateProgress = () => {\r\n    setProgress([{id: 1, progress: 45}])\r\n    console.log(progress)\r\n  }\r\n\r\n  const componentDidMount = () => {\r\n    /* On init set the start time\r\n       Also: multiplying new Date() by 1 will return a timestamp\r\n     */\r\n    startTime = new Date() * 1;\r\n }\r\n\r\n componentDidMount();\r\n \r\n const componentWillUnmount = () => {\r\n     /* Then on view destroy set the endTime */\r\n     const endTime = new Date() * 1;\r\n     /* Subtract the end time with start time, since endTime has greater value. The result\r\n      is the difference between start and end time in milliseconds.\r\n      */\r\n     const elapsed = endTime - startTime;\r\n     /* The result is in milliseconds so:\r\n        elapsed / 1000 -> is seconds\r\n        elapsed / 1000 / 60 -> is minutes\r\n        etc.\r\n      */\r\n\r\n        console.log(elapsed)\r\n        startTime = 0;\r\n };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__videos\">\r\n          <Header />\r\n          {videos.map((video) => (\r\n          <Video \r\n          key = {video.name}\r\n          url={video.url}\r\n          channel = {video.channel}\r\n          description = {video.description}\r\n          song = {video.song}\r\n          likes = {video.likes}/>\r\n        ))}\r\n\r\n      <div className=\"progressBar\">\r\n        <ProgressBar animated now={progress[0].progress} />\r\n      </div>\r\n      </div>\r\n      <Navbar />\r\n      <button onClick={componentWillUnmount}>Bye</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}